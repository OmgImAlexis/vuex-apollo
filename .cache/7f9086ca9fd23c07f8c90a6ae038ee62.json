{"dependencies":[{"name":"/Users/Other/Desktop/dev/vuex-apollo/package.json","includedInParent":true,"mtime":1530961487423},{"name":"/Users/Other/Desktop/dev/vuex-apollo/tests/demo/.babelrc","includedInParent":true,"mtime":1530961464199},{"name":"./types","loc":{"line":1,"column":23},"parent":"/Users/Other/Desktop/dev/vuex-apollo/tests/demo/app/modules/user/actions.js","resolved":"/Users/Other/Desktop/dev/vuex-apollo/tests/demo/app/modules/user/types.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.actions = undefined;\n\nvar _templateObject = _taggedTemplateLiteral(['\\n            query UserInfo {\\n                User(id:21) {\\n                    id\\n                    firstName\\n                    lastName\\n                    email\\n                    avatar \\n                }\\n            }\\n            '], ['\\n            query UserInfo {\\n                User(id:21) {\\n                    id\\n                    firstName\\n                    lastName\\n                    email\\n                    avatar \\n                }\\n            }\\n            ']);\n\nvar _types = require('./types');\n\nvar types = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nvar actions = exports.actions = _defineProperty({\n    INIT: function INIT(_ref) {\n        var commit = _ref.commit;\n\n        console.log('I\\'m called on init');\n    }\n}, types.GET_USER_INFO, function (_ref2) {\n    var commit = _ref2.commit,\n        apollo = _ref2.apollo,\n        gql = _ref2.gql;\n\n    apollo.query({\n        query: gql(_templateObject)\n    }).then(function (response) {\n        commit(types.GET_USER_INFO, response.data.User);\n    });\n});","map":{"mappings":[{"generated":{"line":10,"column":0},"source":"app/modules/user/actions.js","original":{"line":1,"column":0}},{"name":"types","generated":{"line":12,"column":4},"source":"app/modules/user/actions.js","original":{"line":1,"column":12}},{"generated":{"line":20,"column":0},"source":"app/modules/user/actions.js","original":{"line":3,"column":7}},{"name":"actions","generated":{"line":20,"column":4},"source":"app/modules/user/actions.js","original":{"line":3,"column":13}},{"name":"INIT","generated":{"line":21,"column":0},"source":"app/modules/user/actions.js","original":{"line":4,"column":4}},{"generated":{"line":21,"column":8},"source":"app/modules/user/actions.js","original":{"line":3,"column":13}},{"generated":{"line":21,"column":30},"source":"app/modules/user/actions.js","original":{"line":4,"column":22}},{"generated":{"line":22,"column":0},"source":"app/modules/user/actions.js","original":{"line":4,"column":22}},{"name":"commit","generated":{"line":22,"column":12},"source":"app/modules/user/actions.js","original":{"line":4,"column":12}},{"generated":{"line":22,"column":18},"source":"app/modules/user/actions.js","original":{"line":4,"column":22}},{"name":"commit","generated":{"line":22,"column":26},"source":"app/modules/user/actions.js","original":{"line":4,"column":12}},{"generated":{"line":22,"column":32},"source":"app/modules/user/actions.js","original":{"line":4,"column":22}},{"name":"console","generated":{"line":24,"column":0},"source":"app/modules/user/actions.js","original":{"line":5,"column":8}},{"name":"log","generated":{"line":24,"column":16},"source":"app/modules/user/actions.js","original":{"line":5,"column":16}},{"generated":{"line":24,"column":19},"source":"app/modules/user/actions.js","original":{"line":5,"column":8}},{"generated":{"line":25,"column":0},"source":"app/modules/user/actions.js","original":{"line":6,"column":5}},{"generated":{"line":26,"column":0},"source":"app/modules/user/actions.js","original":{"line":3,"column":13}},{"name":"types","generated":{"line":26,"column":3},"source":"app/modules/user/actions.js","original":{"line":7,"column":5}},{"name":"GET_USER_INFO","generated":{"line":26,"column":9},"source":"app/modules/user/actions.js","original":{"line":7,"column":11}},{"generated":{"line":26,"column":22},"source":"app/modules/user/actions.js","original":{"line":3,"column":13}},{"generated":{"line":26,"column":41},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"generated":{"line":27,"column":0},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"name":"commit","generated":{"line":27,"column":8},"source":"app/modules/user/actions.js","original":{"line":7,"column":29}},{"generated":{"line":27,"column":14},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"name":"commit","generated":{"line":27,"column":23},"source":"app/modules/user/actions.js","original":{"line":7,"column":29}},{"generated":{"line":27,"column":29},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"generated":{"line":28,"column":0},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"name":"apollo","generated":{"line":28,"column":8},"source":"app/modules/user/actions.js","original":{"line":7,"column":37}},{"generated":{"line":28,"column":14},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"name":"apollo","generated":{"line":28,"column":23},"source":"app/modules/user/actions.js","original":{"line":7,"column":37}},{"generated":{"line":28,"column":29},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"generated":{"line":29,"column":0},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"name":"gql","generated":{"line":29,"column":8},"source":"app/modules/user/actions.js","original":{"line":7,"column":45}},{"generated":{"line":29,"column":11},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"name":"gql","generated":{"line":29,"column":20},"source":"app/modules/user/actions.js","original":{"line":7,"column":45}},{"generated":{"line":29,"column":23},"source":"app/modules/user/actions.js","original":{"line":7,"column":52}},{"name":"apollo","generated":{"line":31,"column":0},"source":"app/modules/user/actions.js","original":{"line":8,"column":8}},{"name":"query","generated":{"line":31,"column":11},"source":"app/modules/user/actions.js","original":{"line":8,"column":15}},{"generated":{"line":31,"column":16},"source":"app/modules/user/actions.js","original":{"line":8,"column":8}},{"generated":{"line":31,"column":17},"source":"app/modules/user/actions.js","original":{"line":8,"column":21}},{"name":"query","generated":{"line":32,"column":0},"source":"app/modules/user/actions.js","original":{"line":9,"column":12}},{"name":"gql","generated":{"line":32,"column":15},"source":"app/modules/user/actions.js","original":{"line":9,"column":19}},{"generated":{"line":32,"column":18},"source":"app/modules/user/actions.js","original":{"line":9,"column":12}},{"generated":{"line":33,"column":0},"source":"app/modules/user/actions.js","original":{"line":8,"column":21}},{"generated":{"line":33,"column":5},"source":"app/modules/user/actions.js","original":{"line":8,"column":8}},{"name":"then","generated":{"line":33,"column":7},"source":"app/modules/user/actions.js","original":{"line":20,"column":11}},{"generated":{"line":33,"column":11},"source":"app/modules/user/actions.js","original":{"line":8,"column":8}},{"generated":{"line":33,"column":12},"source":"app/modules/user/actions.js","original":{"line":20,"column":16}},{"generated":{"line":33,"column":32},"source":"app/modules/user/actions.js","original":{"line":20,"column":28}},{"name":"commit","generated":{"line":34,"column":0},"source":"app/modules/user/actions.js","original":{"line":21,"column":12}},{"name":"types","generated":{"line":34,"column":15},"source":"app/modules/user/actions.js","original":{"line":21,"column":19}},{"name":"GET_USER_INFO","generated":{"line":34,"column":21},"source":"app/modules/user/actions.js","original":{"line":21,"column":25}},{"generated":{"line":34,"column":34},"source":"app/modules/user/actions.js","original":{"line":21,"column":12}},{"name":"response","generated":{"line":34,"column":36},"source":"app/modules/user/actions.js","original":{"line":21,"column":40}},{"name":"data","generated":{"line":34,"column":45},"source":"app/modules/user/actions.js","original":{"line":21,"column":49}},{"generated":{"line":34,"column":49},"source":"app/modules/user/actions.js","original":{"line":21,"column":40}},{"name":"User","generated":{"line":34,"column":50},"source":"app/modules/user/actions.js","original":{"line":21,"column":54}},{"generated":{"line":34,"column":54},"source":"app/modules/user/actions.js","original":{"line":21,"column":12}},{"generated":{"line":35,"column":0},"source":"app/modules/user/actions.js","original":{"line":22,"column":9}},{"generated":{"line":35,"column":5},"source":"app/modules/user/actions.js","original":{"line":8,"column":8}},{"generated":{"line":36,"column":0},"source":"app/modules/user/actions.js","original":{"line":23,"column":5}},{"generated":{"line":36,"column":1},"source":"app/modules/user/actions.js","original":{"line":3,"column":13}},{"generated":{"line":36,"column":2},"source":"app/modules/user/actions.js","original":{"line":3,"column":7}}],"sources":{"app/modules/user/actions.js":"import * as types from './types'\n\nexport const actions = {\n    INIT ({ commit }) {\n        console.log(`I'm called on init`)\n    },\n    [types.GET_USER_INFO] ({ commit, apollo, gql }) {\n        apollo.query({\n            query: gql`\n            query UserInfo {\n                User(id:21) {\n                    id\n                    firstName\n                    lastName\n                    email\n                    avatar \n                }\n            }\n            `\n        }).then(response => {\n            commit(types.GET_USER_INFO, response.data.User)\n        })\n    }\n}\n"},"lineCount":null}},"hash":"9c8d14ca1d62b544f5419503a65d2b6b","cacheData":{"env":{}},"id":36}